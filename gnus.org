
* gnus
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "dixit@aya.yale.edu")
(setq user-full-name "Jay Dixit")
(setq gnus-always-read-dribble-file t)
(setq gnus-select-method '(nnml ""))
(setq gnus-select-method '(nnimap "gmail"
(nnimap-address "imap.gmail.com")
(nnimap-server-port 993)
(nnimap-stream ssl)))
(setq gnus-use-cache t) 




(setq gnus-select-method
   '(nnimap "gmail"
	    (nnimap-address "imap.gmail.com") ; it could also be imap.googlemail.com if that's your server.
	    (nnimap-server-port "imaps")
	    (nnimap-stream ssl)))




;; store email in ~/gmail directory
(setq nnml-directory "~/gmail")
;; (setq message-directory "~/gmail") 

;; define gnus directories
;; (setq message-directory "~/emacs/gnus/mail/")
(setq gnus-directory "~/emacs/gnus/news/")
(setq nnfolder-directory "~/emacs/gnus/mail/archive") 

;; How to read HTML mail
(setq mm-text-html-renderer 'w3m)
(setq gnus-summary-line-format "%-6,6B%-15,15f |%* %-40,40s | %&user-date; | %U\n")

;; sort by most recent date
(setq gnus-article-sort-functions (quote ((not gnus-article-sort-by-date))))
(setq gnus-thread-sort-functions (quote ((not gnus-thread-sort-by-date))))


;; More attractive Summary View
;; http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f
(when window-system
 (setq gnus-sum-thread-tree-indent " ")
 (setq gnus-sum-thread-tree-root "") ;; "● ")
 (setq gnus-sum-thread-tree-false-root "") ;; "◯ ")
 (setq gnus-sum-thread-tree-single-indent "") ;; "◎ ")
 (setq gnus-sum-thread-tree-vertical    "│")
 (setq gnus-sum-thread-tree-leaf-with-other "├─► ")
 (setq gnus-sum-thread-tree-single-leaf   "╰─► "))
(setq gnus-summary-line-format
   (concat
    "%0{%U%R%z%}"
    "%3{│%}" "%1{%d%}" "%3{│%}" ;; date
    " "
    "%4{%-20,20f%}"        ;; name
    " "
    "%3{│%}"
    " "
    "%1{%B%}"
    "%s\n"))
(setq gnus-summary-display-arrow t)
#+END_SRC


** More attractive Summary View
  :PROPERTIES:
  :CUSTOM_ID: pretty-summary
  :END:
Thanks to Dan Davison.

#+begin_src emacs-lisp
 ;; http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f
 (when window-system
  (setq gnus-sum-thread-tree-indent " ")
  (setq gnus-sum-thread-tree-root "") ;; "● ")
  (setq gnus-sum-thread-tree-false-root "") ;; "◯ ")
  (setq gnus-sum-thread-tree-single-indent "") ;; "◎ ")
  (setq gnus-sum-thread-tree-vertical    "│")
  (setq gnus-sum-thread-tree-leaf-with-other "├─► ")
  (setq gnus-sum-thread-tree-single-leaf   "╰─► "))
 (setq gnus-summary-line-format
    (concat
     "%0{%U%R%z%}"
     "%3{│%}" "%1{%d%}" "%3{│%}" ;; date
     " "
     "%4{%-20,20f%}"        ;; name
     " "
     "%3{│%}"
     " "
     "%1{%B%}"
     "%s\n"))
 (setq gnus-summary-display-arrow t)
#+end_src


** modified email-heading function

#+BEGIN_SRC emacs-lisp

(defun org-mime-htmlize (&optional arg)
"Export a portion of an email body composed using `mml-mode' to
html using `org-mode'. If called with an active region only
export that region, otherwise export the entire body."
 (interactive "P")
 (require 'ox-org)
 (require 'ox-html)
 (let* ((region-p (org-region-active-p))
     (html-start (or (and region-p (region-beginning))
             (save-excursion
              (goto-char (point-min))
              (search-forward mail-header-separator)
              (+ (point) 1))))
     (html-end (or (and region-p (region-end))
            ;; TODO: should catch signature...
            (point-max)))
     (raw-body (concat org-mime-default-header
			  (buffer-substring html-start html-end)))
     (tmp-file (make-temp-name (expand-file-name
				  "mail" temporary-file-directory)))
     (body (org-export-string-as raw-body 'org t))
     ;; because we probably don't want to export a huge style file
     (org-export-htmlize-output-type 'inline-css)
     ;; makes the replies with ">"s look nicer
     (org-export-preserve-breaks org-mime-preserve-breaks)
	 ;; dvipng for inline latex because MathJax doesn't work in mail
	 (org-html-with-latex 'dvipng)
     ;; to hold attachments for inline html images
     (html-and-images
     (org-mime-replace-images
	  (org-export-string-as raw-body 'html t) tmp-file))
     (html-images (unless arg (cdr html-and-images)))
     (html (org-mime-apply-html-hook
        (if arg
          (format org-mime-fixedwith-wrap body)
         (car html-and-images)))))
  (delete-region html-start html-end)
  (save-excursion
   (goto-char html-start)
   (insert (org-mime-multipart
	    body html (mapconcat 'identity html-images "\n"))))))
#+END_SRC

** new-email-from-subtree-with-signature 

#+BEGIN_SRC emacs-lisp 

(defun new-email-from-subtree-with-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
 ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
(end-of-buffer)
(insert "\nWarm regards,\nJay Dixit\n\n---\nJay Dixit
(646) 355-8001
[[http://jaydixit.com/][jaydixit.com]]
\n")
(message-goto-to))
))


(defun new-email-from-subtree-no-signature ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
 ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO (org-entry-get (point) "TO" t))
     (CC (org-entry-get (point) "CC" t))
     (BCC (org-entry-get (point) "BCC" t))
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
;; (end-of-buffer)
)
))
#+END_SRC

** erika-send-mail
#+BEGIN_SRC emacs-lisp
(defun erika-send-email ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "\"Erika Casriel\" <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>") 
     (SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
) 
))
#+END_SRC

*** erika-send-email-styled

#+BEGIN_SRC emacs-lisp
(defun erika-send-email-styled ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <erika.casriel@comcast.net>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <luke.haseloff@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))



   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")

(goto-char (point-min))
          (org-mime-change-class-style "todo STARTED" "color:red;font-weight:bold")

        (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min)) 

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC

*** erika-send-email-test---clone of erika-send-email-styled
This function should be kept exactly the same as the one above, except the emails should go only to myself or Rúdi. Used for testing purposes.

#+BEGIN_SRC emacs-lisp
(defun erika-send-email-test ()
 "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields. Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
 (interactive)
                    ; store location.
 (setq *email-heading-point* (set-marker (make-marker) (point)))
 (save-excursion
  (let ((content (progn
           (unless (org-on-heading-p) (outline-previous-heading))
           (let ((headline (org-element-at-point)))
            (buffer-substring
            (org-element-property :contents-begin headline)
            (org-element-property :contents-end headline)))))
     (TO "Erika Casriel <sunjaydixit@gmail.com>")
     (CC (org-entry-get (point) "CC" t))
(BCC "Luke Haseloff <sunjaydixit@gmail.com>")
(SUBJECT (nth 4 (org-heading-components)))
     (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
     (continue nil)
     (switch-function nil)
     (yank-action nil)
     (send-actions '((email-send-action . nil)))
     (return-action '(email-heading-return)))

   (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
   (message-goto-body)
   (insert content)
   (when CC
    (message-goto-cc)
    (insert CC))
   (when BCC
    (message-goto-bcc)
    (insert BCC))
   (if TO
     (message-goto-body)
    (message-goto-to))
   )
  (let ((org-mime-html-hook
      (list* (lambda ()
          (goto-char (point-min))
          (while (re-search-forward "</?\\(h2\\)" nil t)
           (replace-match "li" nil t nil 1)))
         (lambda ()
          (goto-char (point-min))
          (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
          (goto-char (point-min))

(org-mime-change-class-style "off" "list-style-type: none;")
          (goto-char (point-min)) 

          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
          (goto-char (point-min))
          (org-mime-change-class-style "done DONE" "color:green;font-weight:bold"))
         org-mime-html-hook)))
(message-send-and-exit)
))
)
#+END_SRC
